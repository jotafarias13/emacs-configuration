#+TITLE:  Configuração do Emacs
#+AUTHOR: João Lucas Farias
#+EMAIL: fariasjota09@gmail.com
#+OPTIONS: ':t toc:t author:t email:t
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Introdução
Esse é o arquivo com as configurações de inicialização do Emacs, escrito em Org com os blocos de código em emacs-lisp. Os blocos de código desse arquivo são exportados para o arquivo init.el. Os pacotes vem com hyperlink para facilitar o acesso às suas páginas e as configurações vem com explicações de como e porque foram implementadas.

* Inicialização
Coloca como buffer de inicialização a org-agenda na visão dashboard (customizada). Além disso, coloca como diretório padrão de início o diretório "~/.emacs.d/" e determina o tamanho da janela inicial.

#+begin_src emacs-lisp

;; Buffer de inicialização
(add-hook 'after-init-hook (lambda () (org-agenda nil "d") (delete-other-windows)))

;; Diretório de inicialização
(setq default-directory "~/.emacs.d/")

;; Tamanho da janela de inicialização
(add-to-list 'initial-frame-alist '(height . 1.0))
(add-to-list 'initial-frame-alist '(width . 1.0))

#+end_src

* Interface de Usuário (UI)
Retira alguns elementos desnecessário do Emacs GUI e coloca elementos importantes de visualização de texto. O pacote /[[https://github.com/seagle0128/doom-modeline][doom-modeline]]/ habilita um design minimalista para a barra de modos do Emacs. O pacote /[[https://github.com/domtronn/all-the-icons.el][All The Icons]]/ habilita ícones para todos os tipos de arquivos e diretórios para melhor visualização. O comando para instalar as fontes (/all-the-icons-install-fonts/) adiciona cores para os ícones e só precisa ser executado uma vez. 

#+begin_src emacs-lisp

;; Remove de mensagem de boas-vindas
(setq inhibit-startup-message t)

;; Remove menus
(tool-bar-mode -1)
(menu-bar-mode -1)

;; Remove barra de rolagem
(scroll-bar-mode -1)

;; Numerar linhas e colunas
(column-number-mode)
(global-display-line-numbers-mode t)

;; Desabilita line-number para alguns modos
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; Visual line mode sempre ativo
(global-visual-line-mode 1)

;; Indica começo-fim de parênteses
(add-hook 'after-init-hook (lambda () (show-paren-mode 1)))
;; Altera cor do parêntese e do background quando der match em um parêntese
(add-hook 'show-paren-mode-hook '(lambda () (set-face-attribute 'show-paren-match nil :foreground "Magenta" :background "#595959")))
;; Obs: foi necessário fazer dessa forma por que o show-paren-mode-hook não estava funcionando como esperado.

;; Barra de modos (inferior) minimalista
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

;; Pacote All the icons
(use-package all-the-icons)
;; Obs: é preciso instalar as fontes do pacote (executar apenas uma vez)
;; M-x all-the-icons-install-fonts

#+end_src

* Arquivos de Backup, Autosave e Custom
Gerencia os arquivos de backup e autosave para que fiquem localizados em diretórios distintos, ambos no diretório "~/.emacs.d/". Além disso, envia os /custom-commands/ que o próprio Emacs coloca no init.el para um arquivo separado, localizado no diretório "~/.emacs.d/".

#+begin_src emacs-lisp

;; Gerenciamento de arquivos de backup e autosave
(setq backup-directory-alist '((".*" . "~/.emacs.d/backup/")))
(setq version-control t)
(setq delete-old-versions t)
(setq auto-save-list-file-prefix "~/.emacs.d/autosave/")
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosave/" t)))

;; Envia comandos custom para outro arquivo
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)

#+end_src

* Gerenciador de Pacotes
Configura o pacote /[[https://github.com/jwiegley/use-package][use-package]]/ como gerenciador padrão de pacotes para melhor instalação e configuração.

#+begin_src emacs-lisp

;; Inicialização do gerenciador de pacotes padrão
(require 'package)

;; Repositórios 
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; Inicialização de pacotes
(package-initialize)

;; Instalação do use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Coloca ":ensure t" em todos os pacotes
(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* Atualização Automática de Pacotes
O pacote /[[https://github.com/rranelli/auto-package-update.el][auto-package-update]]/ gerencia a atualização automática de pacotes e configura a frequência em que devem ser atualizados.

#+begin_src emacs-lisp

;; Gerencia atualização automática dos pacotes
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "10:00"))

#+end_src

* Keybindings
Configura alguns keybindings para facilitar a abertura de diretórios e arquivos muito utilizados entre outros.

#+begin_src emacs-lisp

;; Atalhos personalizados para manipular janelas, selecionar texto e usar colar do clipboard
(global-set-key (kbd "M-<up>") 'enlarge-window) ;; aumentar a janela verticalmente com M-<up>
(global-set-key (kbd "M-<down>") 'shrink-window) ;; diminuir a janela verticalmente com M-<down>
(global-set-key (kbd "M-<right>") 'enlarge-window-horizontally) ;; aumentar a janela horizontalmente com M-<right>
(global-set-key (kbd "M-<left>") 'shrink-window-horizontally) ;; diminuir a janela horizontalmente com M-<left>
(global-set-key (kbd "C-=") 'set-mark-command) ;; selecionar texto com C-=
(global-set-key (kbd "C-M-y") 'clipboard-yank) ;; colar do clipboard

;; Atalhos para dired, para abrir o init.el e para abrir o eshell 
(global-set-key (kbd "C-M-0") (lambda () (interactive) (find-file "~/.emacs.d/Emacs.org" nil)))
(global-set-key (kbd "C-M-1") (lambda () (interactive) (dired-jump nil "~/Sync/Jota/Academico/Pós-Graduação/UFRN/Mestrado/Dissertação/Defesa/")))
(global-set-key (kbd "C-M-2") (lambda () (interactive) (dired-jump nil "~/Sync/Jota/Academico/Projetos/C_C++/")))
(global-set-key (kbd "C-M-3") (lambda () (interactive) (dired-jump nil "~/Sync/Jota/Academico/Projetos/Emacs/Org/")))
(global-set-key (kbd "C-M-s") (lambda () (interactive) (eshell nil)))

#+end_src

* Configurações Gerais
** Comados Control e Meta
Coloca o /mac-command-modifier/ como Control e o /mac-right-command-modifier/ como Meta.

#+begin_src emacs-lisp

(when (eq system-type 'darwin) ;; verifica se está no Mac
  (setq mac-command-modifier 'control)
  (setq mac-right-command-modifier 'meta))

#+end_src

** Fonte e Tema
Configura a fonte e seu tamanho, assim como o tema /[[https://github.com/hlissner/emacs-doom-themes][doom-moonlight]]/ utilizado no Emacs. 

#+begin_src emacs-lisp

;; Tamanho das fontes
(defvar jlf/default-font-size 120)
(defvar jlf/default-variable-font-size 120)

;; Fontes utilizadas
;; É necessário baixar as fontes Fira Code e Cantarell
(set-face-attribute 'default nil :font "Fira Code" :height jlf/default-font-size)
(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height jlf/default-font-size)
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height jlf/default-variable-font-size :weight 'regular)   

;; Tema doom-moonlight
(use-package doom-themes
  :init (load-theme 'doom-moonlight t))

#+end_src

** Whick-Key 
O pacote /[[https://github.com/justbur/emacs-which-key][which-key]]/ ajuda a descobrir o que cada keybinding faz oferecendo possibilidades de "completação" toda vez que o usuário começa a digitar um keybinding.

#+begin_src emacs-lisp

(use-package which-key
  :config
  (progn
    (which-key-setup-side-window-right-bottom)
    (which-key-mode)))

#+end_src

** Ace-Window 
O pacote /[[https://github.com/abo-abo/ace-window][ace-window]]/ gerencia a troca de janelas de maneira simples e rápida.

#+begin_src emacs-lisp

(use-package ace-window
  :bind (("C-1" . ace-window)))

#+end_src

** Ivy, Counsel e Swiper 
O pacote /[[https://github.com/abo-abo/swiper][ivy]]/ adiciona estrutura de autocompletion melhor para o Emacs e menus para abertura de arquivos, troca de buffer etc. O /[[https://github.com/Yevgnen/ivy-rich][ivy-rich]]/  adiciona uma coluna no minibuffer com descrições de cada comando, assim como keybindings existentes. O /[[https://github.com/seagle0128/all-the-icons-ivy-rich][all-the-icons-ivy-rich]]/ melhora a visualização do ivy, exibindo ícones para os buffers. O /[[https://github.com/abo-abo/swiper][counsel]]/ substitui alguns comandos do Emacs (como /find-file/, /switch-buffer/ etc) por comandos que funcionam bem com o /[[https://github.com/abo-abo/swiper][ivy]]/, facilitando a utilização dos comandos. O /[[https://github.com/abo-abo/swiper][swiper]]/ substitui o comando /isearch/  que melhora a ferramenta de pesquisa e tem integração com o /[[https://github.com/abo-abo/swiper][ivy]]/.

#+begin_src emacs-lisp

;; Configuração do ivy (autocompletar no minibuffer)
(use-package ivy
  :diminish 
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

;; Exibe ícones para todos os buffer no ivy
(use-package all-the-icons-ivy-rich
  :after ivy
  :init (all-the-icons-ivy-rich-mode 1))

;; Adiciona informações sobre cada comando no ivy
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

;; Substitui comandos para funcionar melhor com ivy
(use-package counsel
  :bind (:map counsel-mode-map
  ([remap switch-to-buffer] . counsel-switch-buffer)
  ([remap dired] . counsel-dired))
  :config
  (counsel-mode 1))

;; Ferramenta de pesquisa que substitui isearch e tem integração com ivy
(use-package swiper)

#+end_src

** Company
O pacote /[[https://company-mode.github.io/][company]]/ substitui a ferramenta para autocompletion in-buffer, tornando-a fácil e intuitiva de usar. Alguns keybindings foram configurados para facilitar a utilização. O pacote /[[https://github.com/sebastiencs/company-box][company-box]]/ melhora a aparência e adiciona ícones para o menu de autocompletion.

#+begin_src emacs-lisp

;; Autocompletion in-buffer
(use-package company
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (add-hook 'company-mode-hook '(lambda () (define-key company-active-map (kbd "<tab>") nil)))
  (add-hook 'company-mode-hook '(lambda () (define-key company-active-map (kbd "TAB") nil)))
  (add-hook 'company-mode-hook '(lambda () (define-key company-active-map (kbd "C-<return>") 'company-abort)))
  (add-hook 'company-mode-hook '(lambda () (define-key company-active-map (kbd "<return>") 'company-complete-selection)))
  (add-hook 'company-mode-hook '(lambda () (define-key company-active-map (kbd "C-j") 'company-select-next)))
  (add-hook 'company-mode-hook '(lambda () (define-key company-active-map (kbd "C-k") 'company-select-previous)))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

;; Melhora aparência do menu de autocompletion
(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

** Dired 
Adiciona algumas configurações do dired para facilitar sua utilização e a navegação pelos diretórios. O pacote /[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]]/ adiciona ícones para os diretórios e arquivos visíveis no dired. 

#+begin_src emacs-lisp

;; Adiciona o hook para pesquisar usando a função dired-isearch-filenames-regexp utilizando o "/"
(eval-after-load "dired" '(progn
  (define-key dired-mode-map (kbd "/") 'dired-isearch-filenames-regexp)
))

;; Adiciona o hook pra quando terminar a pesquisa entrar no arquivo e pesquisar novamente
(add-hook 'isearch-mode-end-hook 
	  (lambda ()
	    (when (and (eq major-mode 'dired-mode)
		       (not isearch-mode-end-hook-quit))
	      (if (file-directory-p (dired-file-name-at-point)) (progn (dired-find-alternate-file) (dired-isearch-filenames-regexp))
		(dired-find-file)
	      ))))

;; Adiciona o hook para quando pesquisar levar o cursor para o início do buffer antes
(add-hook 'isearch-mode-hook 
	  (lambda ()
	    (when (eq major-mode 'dired-mode)
	      (beginning-of-buffer))))

;; Permite usar o comando dired-find-alternate-file que fecha o buffer atual em vez de criar outro, definindo o "<return>" como sendo a função que realiza isso
(put 'dired-find-alternate-file 'disabled nil)
(eval-after-load "dired"
  (lambda ()
    (define-key dired-mode-map (kbd "<return>") 
      (lambda ()
	(interactive)
	(if (file-directory-p (dired-file-name-at-point)) (progn (dired-find-alternate-file)) (dired-find-file))))))

;; Navegação para próximo item e item anterior
(define-key isearch-mode-map "\C-j" 'isearch-repeat-forward)
(define-key isearch-mode-map "\C-k" 'isearch-repeat-backward)

;; Adiciona ícones para os elementos do dired
(use-package all-the-icons-dired
  :hook 
  (dired-mode . all-the-icons-dired-mode)
  (all-the-icons-dired-mode . (lambda () (setq all-the-icons-dired-monochrome nil))))

;; Para MacOS, impede o dired de passar a flag "--dired" para o comando "ls", evitando aparecimento de warnings
(when (string= system-type "darwin")       
  (setq dired-use-ls-dired nil))

#+end_src

** Rainbow-Delimiters 
O pacote /[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]/ facilita a distinção de parênteses aninhados através de cores.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :config
    (set-face-attribute 'rainbow-delimiters-depth-3-face nil :foreground "systemBlueColor")) ;; Fica melhor com o tema doom-moonlight

#+end_src

** Helpful
O pacote /[[https://github.com/Wilfred/helpful][Helpful]]/ adiciona formatação melhor e informações mais úteis para os comandos de /describe/ (C-h).

#+begin_src emacs-lisp

;; Adiciona informação extra nos buffers de ajuda
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** Olivetti
O pacote /[[https://github.com/rnkn/olivetti][Olivetti]]/ introduz um ambiente de escrita mais limpo, centralizado e com largura de texto ajustável.

#+begin_src emacs-lisp

(defun jlf/olivetti-mode-setup ()
  (olivetti-mode)
  (olivetti-set-width 0.9))

(use-package olivetti
  :hook (org-mode . jlf/olivetti-mode-setup)) 

#+end_src

** Evil
O pacote /[[https://github.com/emacs-evil/evil][evil]]/ configura um major mode que simula o modo de edição do Vim, facilitando a edição de texto de forma geral. O pacote /[[https://github.com/emacsmirror/undo-fu][Undo Fu]]/ melhora as funções de desfazer e refazer (undo-redo) para o /[[https://github.com/emacs-evil/evil][evil]]/, tornando-as práticas e simples. O pacote /[[https://github.com/emacs-evil/evil-collection][evil-collection]]/ aumenta a integração do /[[https://github.com/emacs-evil/evil][evil]]/  com outros modos do Emacs. O pacote /[[https://github.com/emacs-evil/evil-surround][evil-surround]]/ emula a ação surround do vim, facilitando a edição de texto. O pacote /[[https://github.com/emacsorphanage/evil-textobj-line][evil-textobj-line]]/ adiciona "linha" (com o comando 'l') como um text-obj para edição de texto, assim como são "w,W,b,B" etc. O pacote /[[https://github.com/linktohack/evil-commentary][evil-commentary]]/ adiciona o comando "gc" para comentar como uma ação de edição de texto, assim como são "d,c,y" etc. O pacote /[[https://github.com/edkolev/evil-goggles][evil-goggles]]/ destaca (highlight) a parte do texto onde um comando foi efetuado, facilitando a percepção do que foi/será alterado. O pacote /[[https://github.com/Dewdrops/evil-exchange/tree/ac50f21b29b6e3a111e10a9e88ae61c907ac5ee8][evil-exchange]]/ adiciona a ação de "troca" de texto com o comando "gz", evitando o ato de copiar um texto, deletar outro e colar o primeiro.

#+begin_src emacs-lisp

;; Melhora as funções de desfazer e refazer do evil
(use-package undo-fu
  :init
  (global-undo-tree-mode -1)
  :config
  (add-hook 'evil-mode-hook '(lambda () (define-key evil-normal-state-map (kbd "u") 'undo-fu-only-undo)))
  (add-hook 'evil-mode-hook '(lambda () (define-key evil-normal-state-map (kbd "C-r") 'undo-fu-only-redo))))

;; Configura o evil-mode para simular o Vim no Emacs
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-normal-state-map (kbd "m") (lambda () (interactive) (evil-open-below 1) (evil-normal-state)))
  (define-key evil-normal-state-map (kbd "M") (lambda () (interactive) (evil-open-above 1) (evil-normal-state)))
  (define-key evil-normal-state-map (kbd "g r") 'revert-buffer)

  ;; Configura a navegação para funcionar quando visual-line-mode não está ativado
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

;; Aumenta a atuação dos keybindings do evil
(use-package evil-collection
  :after evil
  :custom
  (evil-collection-company-use-tng nil)   ;; evita o bug de completion de funções do clangd
  :config
  (evil-collection-init))

;; Emula a ação surround do vim
(use-package evil-surround
  :config
    (global-evil-surround-mode 1))

;; Adiciona "linha" como um text-obj (w,W,b,B etc)
(use-package evil-textobj-line)

;; Adiciona o comandos "gc" para comentar como uma ação (d,c,y etc)
(use-package evil-commentary
  :config
  (evil-commentary-mode))

;; Destaca a parte do texto onde um comando foi efetuado
(use-package evil-goggles
  :config
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))

(use-package evil-exchange)
(setq evil-exchange-key (kbd "gz"))
(setq evil-exchange-cancel-key (kbd "gZ"))
(evil-exchange-install)

#+end_src

** Diversos 
Configuração diversas que não entraram em outras categorias.

#+begin_src emacs-lisp

;; Altera o padrão para separação de sentenças para ser apenas um espaço
(setq sentence-end-double-space nil)

;; Diminui prompts yes/no para agilizar escolha
(fset 'yes-or-no-p 'y-or-n-p)

#+end_src

* Desenvolvimento
** YASnippet
O pacote /[[https://github.com/joaotavora/yasnippet][YASnippet]]/ possibilita a criação de bundles (como TextMate) para diversas linguagens de programação. O pacote /[[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]]/ adiciona vários snippets úteis para utilização. Os snippets próprios criados pelo usuário estão no diretório "~/.emacs.d/snippets/" separados em diretórios distintos para cada linguaguem.

#+begin_src emacs-lisp

;; Possibilita a criação de bundles estilo TextMate
(use-package yasnippet
  :config (yas-global-mode 1))
 
;; Adiciona vários snippets úteis
(use-package yasnippet-snippets)

;; Diretório para adicionar snippets próprios
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))

#+end_src

** Magit 
O pacote /[[https://github.com/magit/magit][Magit]]/ facilita a utilização de comandos em repositórios git, tornando-os naturais e fáceis de utilizar.

#+begin_src emacs-lisp

;; Interface Git
(use-package magit
  :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))  

#+end_src

*NOTA*
Para evitar escrever a senha do ssh à cada interação com o remote, foi feita a adição da chave para o ssh-agent por um tempo *limitado*. Para isso, foi necessário instalar o /[[https://github.com/funtoo/keychain][keychain]]/ no computador (não no Emacs) através do homebrew (talvez não precise mas não testei sem ele).

#+begin_src shell :tangle no

brew install keychain

#+end_src

Em seguida, para possibilitar que, sempre que eu der /pull/ ou /push/ para o remoto, o computador adicione a chave no ssh-agent, é preciso verificar se ela já existe ou não. Por isso, foram criados /global hooks/ para o git. É preciso configurar o arquivo global de configuração do git para determinar o diretório onde ele irá procurar pelos hooks globais.

#+begin_src shell :tangle no

git config --global core.hooksPath ~/.githooks/

#+end_src

Primeiramente, os /global hooks/ verificam se existe o arquivo GLOBAL_HOOKS no diretório .git do repositório local e se está escrito "no" dentro dele. Essa foi a forma temporária (feia e triste, diga-se de passagem) que eu encontrei para evitar que os /global hooks/ sejam executados em repositórios que eu não quero que eles sejam executados. Depois, eles verificam se a chave já está no ssh-agent e, se não estiver, a adicionam. Por fim, executam /local hooks/, se existirem. 

Para que a senha da chave pudesse ser digitada (dentro do Emacs) para adicioná-la ao ssh-agent foi preciso instalar o /[[https://github.com/theseal/ssh-askpass][ssh-askpass]]/ que abre uma janela do MacOS para digitar a senha. Sem isso, o Emacs não oferece maneira de digitar a senha e, portanto, não é possível adicionar a chave ao ssh-agent. A instalação foi feita através do homebrew.

#+begin_src shell :tangle no

brew tap theseal/ssh-askpass
brew install ssh-askpass

# Alternativamente, baixa os arquivos e move o binário para /usr/X11/bin/ (ou para o diretório que o seu computador requisitar)
sudo mv ssh-askpass /usr/X11R6/bin/

#+end_src

** Eshell 
O pacote /[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]/ configura o eshell do Emacs para utilizar o mesmo $PATH do terminal do computador.

#+begin_src emacs-lisp

;; Utiliza $PATH do terminal
(use-package exec-path-from-shell) ; torna o PATH do shell igual do temrinal
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

#+end_src

** AUCTeX
O pacote /[[https://www.gnu.org/software/auctex/][AUCTeX]]/ auxilia e configura a escrita e formatação de arquivos TeX no Emacs. Algumas configurações foram adicionadas para possibilitar compilação com LaTeX-Mk e com watch-document e para colocar o Skim como visualizador de PDF padrão. O pacote /[[https://github.com/iyefrat/evil-tex][evil-tex]]/ habilita keybindings de evil voltados para escrita de documentos TeX.

#+begin_src emacs-lisp

;; AUCTeX
(use-package tex
  :ensure auctex)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)

;; Ativa algumas configurações do AUCTeX para melhorar a escrita do código
(setq TeX-electric-sub-and-superscript t)
(setq LaTeX-electric-left-right-brace t)
(setq TeX-electric-math (cons "$" "$"))

;; Coloca LaTeX-Mk disponível via C-c C-c
;; SyncTeX é configurado no arquivo "~/.latexmkrc"
(add-hook 'LaTeX-mode-hook (lambda ()
  (push
    '("LaTeX-Mk" "latexmk -pdf -pvc %s" TeX-run-TeX nil t
      :help "Run LaTeX-Mk on file")
    TeX-command-list)))

(add-hook 'LaTeX-mode-hook (lambda ()
  (push
    '("CleanAll" "latexmk -c; rm -f *.bbl *.brf" TeX-run-TeX nil t
      :help "Files for deletion not found")
    TeX-command-list)))

(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "LaTeX-Mk")))

;; Usa Skim como visualizador padrão, habilita PDF Sync
;; Displayline do Skim é usado para pesquisa .tex -> .pdf
;; Opção -b grifa a lina atual e -g abre o Skim no background
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
      '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

;; Inicializa o modo servidor no Emacs para possibilitar a comunicação com o Skim
(server-start)

;; Habilita evil keybindings voltados para TeX
(use-package evil-tex
  :hook (LaTeX-mode . evil-tex-mode))
(setq evil-tex-toggle-override-m nil)
(setq evil-tex-toggle-override-t t)

#+end_src

** LSP Mode 
O pacote /[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]]/ serve como um cliente de Language Server Protocol para Emacs. Necessita de um servidor para fazer comunicação com o Emacs e simular ferramentas de uma IDE. Configurado para funcionar com o /[[https://clangd.llvm.org/][clangd]]/ para programação em C++. O pacote /[[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]/ acrescenta informações sobre a parte do código sobre o qual o cursor está em cima, mostrando-as no minibuffer ou em um menu. O pacote /[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]]/ faz a integração do /[[https://github.com/abo-abo/swiper][ivy]]/ no /[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]]/.

Após instalar o /[[https://clangd.llvm.org/][clangd]]/, é preciso adicionar ele ao $PATH do terminal. Depois, criar o arquivo compile_commands.json no project root directory. Para isso, instala o /[[https://github.com/nickdiego/compiledb][compiledb]]/ e o utiliza para para gerar o .json através de um Makefile com o comando "compiledb -n make".

#+begin_src emacs-lisp

;; Instalação do clangd: brew install llvm
;; Instalação do compiledb: pip install compiledb

;; Breadcrumb no topo do buffer (caminho do arquivo)
(defun jlf/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(project path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

;; Adiciona funcionalidades de IDE para o Emacs
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . jlf/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l") 
  :hook (c++-mode . lsp)
  :config
  (lsp-enable-which-key-integration t))

;; Feature do clangd que possibilita a escolha do overload de uma função no company-box
(setq lsp-clients-clangd-args '("--completion-style=detailed"))

;; Pacote para adicionar explicação do código à medida que o cursor navega pelo buffer 
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

;; Realiza integração do ivy no lsp-mode
(use-package lsp-ivy)

#+end_src

** Eglot
O pacote /[[https://github.com/joaotavora/eglot][Eglot]]/ serve como um cliente de Language Server Protocol para Emacs. Necessita de um servidor para fazer comunicação com o Emacs e simular ferramentas de uma IDE. Configurado para funcionar com o /[[https://github.com/astoff/digestif][Digestif]]/ para programação em LaTeX, se somando com as funcionalidades do /[[https://www.gnu.org/software/auctex/][AUCTeX]]/.  

Após baixar o /[[https://github.com/astoff/digestif][Digestif]]/, é preciso adicionar ele ao $PATH do terminal, torná-lo executável (chmod +x path-to-digestif) e executá-lo uma vez para que baixe o pacote.

#+begin_src emacs-lisp

;; Funciona como um cliente LSP para Emacs, utilizado para escrever em LaTeX
(use-package eglot
  :hook (LaTeX-mode . eglot-ensure))

;; Auxilia o Eglot a reconhecer projetos com arquivos em diretórios distintos
(defun jlf/latex-root (dir)
  (when-let ((root (locate-dominating-file dir "defesa.tex")))
    (cons 'latex-module root)))

(add-hook 'project-find-functions #'jlf/latex-root)

(cl-defmethod project-root ((project (head latex-module)))
   (cdr project))

#+end_src

* Org Mode
 /[[https://orgmode.org/][Org Mode]]/ é um editor de documentos, planejador de projetos e tarefas e ambiente de programação muito útil e customizável, sendo de extrema importância para as tarefas e projetos do dia-a-dia.

** Fontes e Faces
Configuração de várias faces de texto para ajustar os tamanhos dos headings e usar fontes de largura variável (variable-pitch) para ficar mais similar a um ambiente de edição. Tabelas, blocos de código e outros ambientes mantém fontes de largura fixa (fixed-pitch) para melhorar a distinção e exibição.

#+begin_src emacs-lisp

;; Congifuração das fontes e faces
(defun jlf/org-font-setup ()

  ;; Substitui os hífens das listas por pontos (bullets)
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Configura as faces dos headings
  (dolist (face '((org-level-1 . 1.5)
                  (org-level-2 . 1.3)
                  (org-level-3 . 1.2)
                  (org-level-4 . 1.1)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Assegura que o que deve ser fixed-pitch no org-mode fique dessa forma
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Configuração Geral
Contém a configuração básica do org-mode juntamente com as configurações do org-agenda, org-habits e org-capture-templates.

#+begin_src emacs-lisp

(defun jlf/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :pin org
  :commands (org-capture org-agenda)
  :hook (org-mode . jlf/org-mode-setup)
  :bind 
  ("C-c t" . counsel-org-tag)
  ("C-c a" . org-agenda)
  ("C-c d" . (lambda () (interactive) (org-todo "DONE"))) 
  ("C-c w" . (lambda () (interactive) (org-todo "DONE") (org-refile))) 
  :config
  (setq org-ellipsis " ▾")
  (setq org-hide-emphasis-markers t) 

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
        '("~/Sync/Jota/Academico/Projetos/Emacs/Org/Tarefas.org"))
          ;; "~/Sync/Jota/Academico/Projetos/Emacs/Org/Saude.org"))
          ;; "~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")))
  ;;     (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  ;; (setq org-refile-targets
  ;;   '(("~/Sync/Jota/Academico/Projetos/Emacs/Org/Arquivado.org" :maxlevel . 1)
  ;;     ("~/Sync/Jota/Academico/Projetos/Emacs/Org/Tarefas.org" :maxlevel . 1)))

  (setq org-refile-targets
    '(("Arquivado.org" :maxlevel . 1)
      ("Tarefas.org" :maxlevel . 1)))

  ;; Salva os buffers de org depois de executar o refile
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
    '((:startgroup)
       ;; Tags customizadas
       (:endgroup)
       ("Saúde" . ?S)
       ("Consulta" . ?c)
       ("Exame" . ?e)
       ("Trabalho" . ?T)
       ("Mestrado" . ?m)
       ("Lazer" . ?L)
       ("Emacs" . ?E)))
       ;; ("batch" . ?b)
       ;; ("note" . ?n)
       ;; ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "TODO"
        ((org-agenda-overriding-header "TODO Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Ações NEXT de baixo esforço (low-effort)
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

  (jlf/org-font-setup))

#+end_src

** Evil-Org
O pacote /[[https://github.com/Somelauw/evil-org-mode][evil-org]]/ habilita keybindings do /[[https://github.com/emacs-evil/evil][evil]]/ para o /[[https://orgmode.org/][Org Mode]]/.

#+begin_src emacs-lisp

;; Melhora a integração do evil com org
(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

#+end_src

** Headings
O pacote /[[https://github.com/sabof/org-bullets][org-bullets]]/ permite substituir os indicadores padrão dos headings (*).  

#+begin_src emacs-lisp

;; Usa bullet points em vez de hífen
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Templates de Estrutura
Os templates de estrutura (structure templates) permitem criar snippets para inserção de blocos de código no documento.

#+begin_src emacs-lisp

;; Structure templates para as linguagens mais utilizadas em org-mode
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cc" . "src C"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src C++"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Babel
Responsável por executar ou exportar blocos de código em org-mode. Configurado de forma que o arquivo de saída associado aos blocos de código seja exportado toda vez que um arquivo do diretório do Emacs ("~/.emacs.d/") for salvo. $AJEITAR FUNÇÃO$

#+begin_src emacs-lisp

;; Configura as linguagens de programação a serem compatíveis com org-babel
(with-eval-after-load 'org
(org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
    (C . t)
    (python . t))))

;; Exporta automaticamente o arquivo de saída associado aos blocos de código (tangle) toda vez que o arquivo .org for salvo
(defun jlf/org-babel-tangle-config ()
(when (string-equal (buffer-file-name) "/Users/Jota/.emacs.d/Emacs.org")
;; (when (string-equal (file-name-directory (buffer-file-name))
;;                     (expand-file-name user-emacs-directory))
    (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jlf/org-babel-tangle-config)))

#+end_src

